name: release

# Controls when the workflow will run
on:
  push:
    branches:
      - main
    
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: setup eli
        run: |
          TMP_NAME="/tmp/$(head -n 1 -c 32 /dev/urandom | tr -dc 'a-zA-Z0-9'| fold -w 32)"

          if which curl > /dev/null; then
              set -- curl -L --progress-bar -o "$TMP_NAME"
              LATEST=$(curl -sL https://api.github.com/repos/alis-is/eli/releases/latest | grep tag_name | sed 's/  "tag_name": "//g' | sed 's/",//g')
          else 
              set -- wget -q --show-progress -O "$TMP_NAME"
              LATEST=$(wget -qO- https://api.github.com/repos/alis-is/eli/releases/latest | grep tag_name | sed 's/  "tag_name": "//g' | sed 's/",//g')
          fi

          PLATFORM=$(uname -m)
          echo "Downloading eli-unix-$PLATFORM $LATEST..."

          if "$@" "https://github.com/alis-is/eli/releases/download/$LATEST/eli-unix-$PLATFORM" &&
              mv "$TMP_NAME" ./eli &&
              chmod +x ./eli; then
              echo "eli $LATEST for $PLATFORM successfuly installed."
          else 
              echo "eli installation failed!" 1>&2
              exit 1
          fi

      - name: test ami
        run: |
          ./eli ./tests/all.lua

      - name: prep
        id: prep
        run: |
          VERSION=$(./eli -e "info = require'src.version-info'; io.write(info.VERSION)")
          echo "::set-output name=VERSION::$VERSION"
          if git tag -l "$VERSION" | grep "$VERSION"; then 
            echo "Version $VERSION already exists";
          else
            echo "::set-output name=NEEDS_RELEASE::true"
          fi

      - name: build ami
        if: ${{ steps.prep.outputs.NEEDS_RELEASE == 'true'}}
        run: |
          ./eli ./build/build.lua
          cd .meta && zip ../meta.zip -r * && cd ..

      - name: publish
        uses: ncipollo/release-action@v1
        if: ${{ steps.prep.outputs.NEEDS_RELEASE == 'true'}}
        with:
          artifacts: "meta.zip,bin/ami.lua,bin/exit-codes.json"
          tag: ${{ steps.prep.outputs.VERSION }}
          token: ${{ secrets.GITHUB_TOKEN }}